import { createClient } from '@/lib/utils/supabase/client';

/**
 * Supabase kapcsolat teszt
 * Ellen≈ërzi, hogy a Supabase kliens megfelel≈ëen kapcsol√≥dik-e az adatb√°zishoz
 */
export async function testSupabaseConnection(): Promise<boolean> {
  console.log('üîç Supabase kapcsolat tesztel√©se...');
  
  try {
    // Supabase kliens l√©trehoz√°sa
    const supabase = createClient();
    
    console.log('‚úÖ Supabase kliens sikeresen l√©trehozva');
    
    // Egyszer≈± lek√©rdez√©s v√©grehajt√°sa - az auth.users t√°bla ellen≈ërz√©se
    const { error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.log('‚ö†Ô∏è  Auth hiba (ez v√°rhat√≥, ha nincs bejelentkezett user):', authError.message);
    } else {
      console.log('‚úÖ Auth kapcsolat m≈±k√∂dik');
    }
    
    // Pr√≥b√°ljunk egy egyszer≈± RPC h√≠v√°st vagy ping-et
    // Mivel m√©g nincsenek t√°bl√°k, pr√≥b√°ljuk meg a metaadatok lek√©rdez√©s√©t
    const { data: versionData, error: versionError } = await supabase
      .rpc('version'); // PostgreSQL verzi√≥ lek√©rdez√©se
    
    if (versionError) {
      console.log('‚ö†Ô∏è  RPC hiba (ez v√°rhat√≥, ha nincs version RPC f√ºggv√©ny):', versionError.message);
      
      // Alternat√≠v teszt: pr√≥b√°ljunk egy egyszer≈± ping-et
      try {
        // Egyszer≈± auth ping-gel tesztelj√ºk a kapcsolatot
        await supabase.auth.getUser();
        console.log('‚úÖ Adatb√°zis kapcsolat m≈±k√∂dik (auth ping sikeres)');
      } catch (pingError) {
        console.log('‚ùå Adatb√°zis kapcsolat hiba:', pingError);
        return false;
      }
    } else {
      console.log('‚úÖ RPC kapcsolat m≈±k√∂dik, PostgreSQL verzi√≥:', versionData);
    }
    
    // Environment v√°ltoz√≥k ellen≈ërz√©se
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå Hi√°nyz√≥ environment v√°ltoz√≥k!');
      console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ Be√°ll√≠tva' : '‚ùå Hi√°nyzik');
      console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ Be√°ll√≠tva' : '‚ùå Hi√°nyzik');
      return false;
    }
    
    console.log('‚úÖ Environment v√°ltoz√≥k rendben');
    console.log('üìç Supabase URL:', supabaseUrl);
    console.log('üîë Anon Key:', supabaseKey?.substring(0, 20) + '...');
    
    // √ñsszes√≠t≈ë eredm√©ny
    console.log('üéâ Supabase kapcsolat teszt sikeres!');
    return true;
    
  } catch (error) {
    console.error('‚ùå Supabase kapcsolat teszt sikertelen:', error);
    return false;
  }
}

/**
 * Supabase adatb√°zis s√©ma teszt
 * Ellen≈ërzi, hogy l√©teznek-e a sz√ºks√©ges t√°bl√°k (ha vannak)
 */
export async function testSupabaseSchema(): Promise<boolean> {
  console.log('üîç Supabase adatb√°zis s√©ma tesztel√©se...');
  
  try {
    const supabase = createClient();
    
    // Pr√≥b√°ljunk meg egy egyszer≈± SQL lek√©rdez√©st v√©grehajtani
    // Ez ellen≈ërzi, hogy van-e hozz√°f√©r√©s√ºnk az adatb√°zishoz
    const { data: result, error } = await supabase
      .rpc('get_schema_version', {});
    
    if (error) {
      console.log('‚ö†Ô∏è  Nincs get_schema_version RPC f√ºggv√©ny (ez norm√°lis egy √∫j projektben)');
      
      // Pr√≥b√°ljunk meg alapvet≈ë admin m≈±veleteket
      try {
        // Egyszer≈± teszt: pr√≥b√°ljuk meg lek√©rni a jelenlegi user-t
        const { error: userError } = await supabase.auth.getUser();
        if (userError) {
          console.log('‚ö†Ô∏è  Auth hiba:', userError.message);
        }
        
        console.log('‚úÖ Alapvet≈ë adatb√°zis m≈±veletek m≈±k√∂dnek');
        console.log('üìã M√©g nincsenek egy√©ni t√°bl√°k l√©trehozva, de ez norm√°lis egy √∫j projektben');
        return true;
      } catch (basicError) {
        console.log('‚ùå Alapvet≈ë adatb√°zis m≈±veletek hib√°sak:', basicError);
        return false;
      }
    } else {
      console.log('‚úÖ S√©ma verzi√≥:', result);
      return true;
    }
    
  } catch (error) {
    console.error('‚ùå S√©ma teszt sikertelen:', error);
    return false;
  }
}

// Ha ez a f√°jl k√∂zvetlen√ºl fut (pl. Node.js-ben)
if (typeof window === 'undefined') {
  console.log('üöÄ Supabase tesztek futtat√°sa...\n');
  
  let connectionSuccess = false;
  
  testSupabaseConnection()
    .then((result) => {
      connectionSuccess = result;
      if (result) {
        return testSupabaseSchema();
      }
      return false;
    })
    .then((schemaSuccess) => {
      console.log('\nüìä Teszt eredm√©nyek:');
      console.log('Kapcsolat teszt:', connectionSuccess ? '‚úÖ Sikeres' : '‚ùå Sikertelen');
      console.log('S√©ma teszt:', schemaSuccess ? '‚úÖ Sikeres' : '‚ùå Sikertelen');
    })
    .catch(console.error);
}
